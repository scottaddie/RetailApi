#!/bin/bash

# Generate a random number for unique resource names
instanceId=$(($RANDOM * $RANDOM))

# Constants
gitUrl=https://github.com/scottaddie/retailapi
gitBranch=master
gitRepoWorkingDirectory=~/retailapi/retail-api
retailApiProjectFile=retail-api/RetailApi.csproj

location=SouthCentralUs
resourceGroup=EfCoreModule

sqlServerName=sql$instanceId
sqlUsername=SqlUser
sqlPassword=Pass.$RANDOM
databaseName=ContosoPets

keyVaultEndpoint=vault$instanceId

websiteName=web$instanceId
webAppPrincipalId=''
webAppDeploymentPassword=0iQzB97IEc

connectFile='connect.txt'
connectInfo=''

# Functions
prepareEnvironment() {
    echo Downloading code and preparing environment...
    
    # Set location
    cd ~

    # Install .NET Core global tool to display connection info
    dotnet tool install dotnetsay --tool-path ~/dotnetsay

    clear
    ~/dotnetsay/dotnetsay $'\n\033[1;37mHi there!\n\033[0;37mI\'m going to setup some \033[1;34mAzure\033[0;37m resources\nand get the code you\'ll need for this module.\033[1;35m'
    echo $'\033[0;37m'

    # Set up Git global variables
    git config --global user.name "Microsoft Learn Student"
    git config --global user.email learn@contoso.com
    
    # Download the sample project, restore NuGet packages, and build
    echo Downloading code...
    git clone --branch $gitBranch $gitUrl --quiet
    echo Building code...
    cd $gitRepoWorkingDirectory
    dotnet build --verbosity quiet
}

buildResults() {
    connectInfo+=$'\n'
    connectInfo+=$'\033[1;32m\033[4mConnection Info\033[0;37m (view again by running: \033[1;37mcat ~/connect.txt \033[0;37m)'
    connectInfo+=$'\n'

    # db connection
    connectInfo+=$'\033[1;35mDB Connection String:\033[0;37m '
    connectInfo+=$'Data Source='
    connectInfo+=$sqlServerName
    connectInfo+='.database.windows.net;Initial Catalog='
    connectInfo+=$databaseName
    connectInfo+=';User ID={0};Password={1};Connect Timeout=30;Encrypt=True;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False' 
    connectInfo+=$'\n' 
    # username 
    connectInfo+=$'\033[1;35mDB Hostname: \033[0;37m'
    connectInfo+=$sqlServerName.database.windows.net 
    connectInfo+=$'\n'
    # username 
    connectInfo+=$'\033[1;35mDB Username: \033[0;37m'
    connectInfo+=$sqlUsername@$sqlServerName 
    connectInfo+=$'\n'
    # password
    connectInfo+=$'\033[1;35mDB Password: \033[0;37m'
    connectInfo+=$sqlPassword
    connectInfo+=$'\n'
    # key vault
    connectInfo+=$'\033[1;35mKey Vault Endpoint: \033[0;37m'
    connectInfo+=$keyVaultEndpoint
    connectInfo+=$'\n'

    connectInfo+=$'\033[1;35mWeb App URL: \033[0;37m'
    connectInfo+=https://$websiteName.azurewebsites.net
    connectInfo+=$'\n'

    # Set to purple for drawing .NET Bot
    connectInfo+=$'\033[1;35m'

    echo $'Done!\n\n\n\n'
    ~/dotnetsay/dotnetsay $'\n\033[1;37mYour environment is ready!\n\033[0;37mI set up some \033[1;34mAzure\033[0;37m resources and downloaded the code you\'ll need.\n\033[1;35mYou can find your connection information below.\033[1;35m'
    echo "$connectInfo" > ~/$connectFile
    cat ~/$connectFile
}

# Provision Azure Resource Group
provisionResourceGroup() {
    echo Provisioning Azure Resource Group...

    az group create \
        --name $resourceGroup \
        --location $location \
        --output none
}

# Provision Azure SQL Database
provisionDatabase() {
    echo Provisioning Azure SQL Database...

    az sql server create \
        --name $sqlServerName \
        --resource-group $resourceGroup \
        --admin-user $sqlUsername \
        --admin-password $sqlPassword \
        --location $location \
        --output none

    az sql db create \
        --name $databaseName \
        --server $sqlServerName \
        --resource-group $resourceGroup \
        --output none

    az sql server firewall-rule create \
        --name AllowAzureAccess \
        --start-ip-address 0.0.0.0 \
        --end-ip-address 0.0.0.0 \
        --server $sqlServerName \
        --resource-group $resourceGroup \
        --output none
}

# Provision Azure App Service
provisionAppService() {
    echo Provisioning Azure App Service...

    az appservice plan create \
        --name $websiteName \
        --resource-group $resourceGroup \
        --location $location \
        --output none

    az webapp create \
        --name $websiteName \
        --plan $websiteName \
        --resource-group $resourceGroup \
        --output none
        
    # Enable Managed Service Identity on web app
    webAppPrincipalId=$(az webapp identity assign \
        --name $websiteName \
        --resource-group $resourceGroup \
        --query principalId \
        --output tsv)

    # Specify project to build when doing git push
    az webapp config appsettings set \
        --name $websiteName \
        --resource-group $resourceGroup \
        --settings PROJECT=$retailApiProjectFile \
        --output none

    # Create a deployment user
    az webapp deployment user set \
        --user-name $websiteName \
        --password $webAppDeploymentPassword \
        --output none
    
    # Set the deployment source
    az webapp deployment source config-local-git \
        --name $websiteName \
        --resource-group $resourceGroup \
        --output none

    # Add the URL as a Git remote repository
    git remote add azure https://$websiteName:$webAppDeploymentPassword@$websiteName.scm.azurewebsites.net/$websiteName.git
}

# Provision Azure Key Vault
provisionKeyVault() {
    echo Provisioning Azure Key Vault...

    az keyvault create \
        --resource-group $resourceGroup \
        --name $keyVaultEndpoint \
        --output none
    
    az keyvault secret set \
        --name $databaseName--Username \
        --value SqlUser \
        --vault-name $keyVaultEndpoint \
        --output none        
    
    az keyvault secret set \
        --name $databaseName--Password \
        --value $sqlPassword \
        --vault-name $keyVaultEndpoint \
        --output none

    # Set an access policy for the web app's principal ID
    # which permits Get & List operations on the Key Vault
    az keyvault set-policy \
        --name vault$instanceId \
        --object-id $webAppPrincipalId \
        --secret-permissions get list \
        --output none  
}


# Create resources
prepareEnvironment
provisionResourceGroup
provisionDatabase
provisionAppService
provisionKeyVault
buildResults

#END
